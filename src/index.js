const maxScrolls = 200;

async function run() {
  await loadAllOrders();
  const ordersAmounts = checkAmount();

  console.log('=============================');
  console.log(
    `%c‚úÖ –ù–∞–π–¥–µ–Ω–æ ${ordersAmounts.length} –∑–∞–∫–∞–∑–æ–≤, —Å–ø–∏—Å–æ–∫ –∏—Ö —Å—É–º–º –æ—Ç —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ –∫ —Å–∞–º–æ–º—É –¥–µ—à–µ–≤–æ–º—É:`,
    'color: BurlyWood; font-size: 14px;',
  );
  console.log(
    `%c${ordersAmounts.sort((a, b) => b - a).join(', ')}`,
    'color: BurlyWood; font-size: 12px;',
  );
  console.log('=============================');
  console.log(
    '%cüì¶ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:',
    'color: ForestGreen; font-size: 16px; font-weight: bold;',
  );
  console.log(
    '%cüí∞ 3407 ‚ÇΩ',
    'color: DarkOrange; font-size: 20px; font-weight: bold;',
  );
  console.log('=============================');
  console.log(
    '%cüì¶ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:',
    'color: ForestGreen; font-size: 16px; font-weight: bold;',
  );
  console.log(
    '%cüí∞ 3407 ‚ÇΩ',
    'color: DarkOrange; font-size: 20px; font-weight: bold;',
  );
  console.log('=============================');
  console.log(
    '%cüì¶ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤—ã–∫—É–ø–∞:',
    'color: ForestGreen; font-size: 16px; font-weight: bold;',
  );
  console.log(
    '%cüí∞ 3407 ‚ÇΩ',
    'color: DarkOrange; font-size: 20px; font-weight: bold;',
  );
  console.log('=============================');
  console.log(
    `%c‚úÖ –ö–û–ù–ï–¶`,
    'color: BurlyWood; font-size: 32px; font-weight: bold;',
  );
}

run();

function getCurentOrdersCount() {
  return Array.from(document.querySelectorAll('span')).filter(
    (el) => el.textContent && el.textContent.trim().includes('–ó–∞–∫–∞–∑ –æ—Ç'),
  ).length;
}

function waitFor(timeout) {
  return new Promise((resolve) => setTimeout(resolve, timeout));
}

/**
 * Scroll the page and check if the number of orders has changed
 *
 * @param count Number of current iteration
 * @returns {Promise<boolean>} Is next scroll needed
 */
async function scrollIteration(count) {
  const timeout = 300; // Adjust timeout if needed
  let prevOrdersCount = getCurentOrdersCount();

  window.scrollBy(0, 1000);
  await waitFor(timeout);
  window.scrollBy(0, 1000);
  await waitFor(timeout);

  if (count > maxScrolls) {
    console.error(
      `%c‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–∞–∫—Å–∏–º—É–º ${maxScrolls}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞`,
      'color: Crimson; font-size: 24px; font-weight: bold;',
    );
    throw new Error('Too many scrolls');
  }

  console.clear();
  console.log(
    `%c‚è≥ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Å–∫—Ä–æ–ª–µ–Ω ${count} —Ä–∞–∑, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å–∫—Ä–æ–ª–∏—Ç—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`,
    'color: BurlyWood; font-size: 16px;',
  );

  if (getCurentOrdersCount() !== prevOrdersCount) {
    return true;
  }

  // wait for content to be loaded for the case when it is not loaded yet
  await waitFor(2000);
  if (getCurentOrdersCount() !== prevOrdersCount) {
    return true;
  }

  // wait for content to be loaded for the case when it is not loaded yet
  await waitFor(2000);
  if (getCurentOrdersCount() !== prevOrdersCount) {
    return true;
  }

  return false;
}

async function loadAllOrders() {
  for (let count = 1; count < maxScrolls; count++) {
    const shouldContinue = await scrollIteration(count);
    if (!shouldContinue) {
      console.log(
        `%c‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Å–∫—Ä–æ–ª–µ–Ω ${count} —Ä–∞–∑ –∏ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.`,
        'color: BurlyWood; font-size: 16px;',
      );
      break;
    }
  }
}

function checkAmount() {
  const receivedElements = Array.from(document.querySelectorAll('span')).filter(
    (el) => el.textContent && el.textContent.trim().includes('–ó–∞–∫–∞–∑ –æ—Ç'),
  );

  let ordersAmounts = [];

  receivedElements.forEach((element) => {
    let parent =
      element.parentElement.parentElement.parentElement.parentElement;

    const amountElement = Array.from(parent.querySelectorAll('span')).find(
      (span) =>
        span.textContent &&
        span.textContent.trim().match(/^.*\d*[\s\u00A0]*\d+[\s\u00A0]*‚ÇΩ$/),
    );

    if (amountElement) {
      // Extract the amount, remove non-numeric characters, and parse it as an integer
      const amountText = amountElement.textContent.replace(/\s|‚ÇΩ/g, '');
      const amount = parseInt(amountText, 10);

      if (!isNaN(amount)) {
        ordersAmounts.push(amount);
      }
    }
  });

  return ordersAmounts;
}
